
services:
  # 1) Base de datos MySQL para tu API
  database:
    image: mysql:9.2.0
    container_name: crud_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 31415999
      MYSQL_DATABASE: principal_database
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - quarkus_network

  # 2) API CRUD Quarkus
  api_crud:
    build:
      context: ./ApiCrudUniquindio2025_Quarkus
      dockerfile: Dockerfile.api-crud.jvm
    container_name: api_crud
    depends_on:
      - database
      - artemis
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://database:3306/principal_database?useSSL=false&allowPublicKeyRetrieval=true
      QUARKUS_DATASOURCE_USERNAME: root
      QUARKUS_DATASOURCE_PASSWORD: 31415999
      AMQP_HOST: artemis
      AMQP_PORT: 5672
      AMQP_USERNAME: usuario
      AMQP_PASSWORD: contraseña
    ports:
      - "9090:9090"
    networks:
      - quarkus_network

  # 3) Servicio de notificaciones
  servicio_notificaciones:
    build:
      context: . 
      dockerfile: Dockerfile.notificaciones.jvm
    container_name: servicio_notificaciones
    depends_on:
      - artemis
    environment:
      AMQP_HOST: artemis
      AMQP_PORT: 5672
      AMQP_USERNAME: usuario
      AMQP_PASSWORD: contraseña
      MAIL_USERNAME: mapsphereapp@gmail.com
      MAIL_PASSWORD: fyswvztlvpqohlze
      TWILIO_ACCOUNT_SID: ACXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      TWILIO_AUTH_TOKEN: tu_auth_token
      TWILIO_PHONE_NUMBER: +1XXXXXXXXXX
      TWILIO_WHATSAPP_NUMBER: whatsapp:+14155238886
    ports:
      - "8081:8081"
    networks:
      - quarkus_network

  # 4) Artemis (ActiveMQ)
  artemis:
    image: vromero/activemq-artemis
    container_name: artemis
    platform: linux/amd64
    environment:
      ARTEMIS_USERNAME: usuario
      ARTEMIS_PASSWORD: contraseña
      ENABLE_JMX_EXPORTER: "true"
      ARTEMIS_EXTRA_ARGS: "--queues notification-queue"
    ports:
      - "8161:8161"
      - "5672:5672"
    networks:
      - quarkus_network

  # 5) Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - quarkus_network
    depends_on:
      - api_crud
      - servicio_notificaciones

  # 6) Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - quarkus_network
    depends_on:
      - prometheus

  # 7) Elasticsearch para logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - quarkus_network

  # 8) Logstash para pipeline de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ../logs:/logs
    ports:
      - "5044:5000"
    networks:
      - quarkus_network
    depends_on:
      - elasticsearch

  # 9) Kibana para visualizar logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - quarkus_network
    depends_on:
      - elasticsearch

  # 10) Base de datos PostgreSQL para SonarQube
  sonar_db:
    image: postgres:13
    container_name: sonar_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      - quarkus_network

  # 11) SonarQube Community
  sonarqube:
    image: sonarqube:9.9-community
    container_name: sonarqube
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - quarkus_network

  # 12) Jenkins con Docker y Maven ya instalados
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins.jvm
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8082:8080"
      - "50001:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
     - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
    - quarkus_network

networks:
  quarkus_network:

volumes:
  mysql_data:
  esdata:
  sonar_db_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  jenkins_home: